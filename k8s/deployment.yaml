apiVersion: apps/v1
kind: Deployment
metadata:
  name: svc-matching-engine
  namespace: trading
  annotations:
    argocd.argoproj.io/sync-wave: "40"
spec:
  replicas: 2
  selector: { matchLabels: { app: svc-matching-engine } }
  template:
    metadata:
      labels: { app: svc-matching-engine, hotpath: "true" }
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        # NUMA/CPU 매니저(static) 사용하려면 노드 설정 필요. Pod는 Guaranteed QoS로 힌트 제공.
    spec:
      priorityClassName: hotpath-high         # [ADDED]
      nodeSelector: { nodepool: perf }        # [ADDED] 전용 노드풀(예시)
      tolerations:                            # [ADDED] 전용 노드 스케줄 허용
        - key: "workload"
          operator: "Equal"
          value: "hotpath"
          effect: "NoSchedule"
      topologySpreadConstraints:              # [ADDED] 존 분산
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector: { matchLabels: { app: svc-matching-engine } }
      affinity:                               # [ADDED] 동일 노드 집적 피함
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values: ["svc-matching-engine"]
              topologyKey: kubernetes.io/hostname
      containers:
        - name: POD_NAME  # [이름짓는게 힘들다]
          image: ghcr.io/2025-demo-01/svc-matching-engine:0.1.0
          ports: [ { name: metrics, containerPort: 9090 } ]
          env:
            - name: KAFKA_SASL_USER                 # [ADDED]
              valueFrom: { secretKeyRef: { name: matching-secret, key: KAFKA_USERNAME } }
            - name: KAFKA_SASL_PASS                 # [ADDED]
              valueFrom: { secretKeyRef: { name: matching-secret, key: KAFKA_PASSWORD } }
          volumeMounts:
            - name: kafka-ca
              mountPath: /etc/kafka/ca
          volumes:
            - name: kafka-ca
              secret:
                secretName: matching-secret
                items:
                  - key: KAFKA_CA_CRT
                    path: ca.crt
            - { name: KAFKA_BROKERS, valueFrom: { secretKeyRef: { name: kafka-secret, key: brokers } } }
            - { name: CLICKHOUSE_URL, valueFrom: { secretKeyRef: { name: clickhouse-secret, key: url } } }
            - { name: BATCH_SIZE, value: "500" }                 # [ADDED]
            - { name: BATCH_WINDOW_MS, value: "50" }             # [ADDED]
            - { name: ORDERS_IN_TOPIC, value: "orders.in" }
            - { name: TRADES_OUT_TOPIC, value: "trades.out" }
          resources:                                             # [ADDED] Guaranteed QoS → 고정 CPU
            requests: { cpu: "2", memory: "1Gi" }
            limits:   { cpu: "2", memory: "1Gi" }
          securityContext:
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            seccompProfile: { type: RuntimeDefault }
            capabilities: { drop: ["ALL"] }
